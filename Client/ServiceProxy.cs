//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Client.ICryptography", CallbackContract=typeof(Client.ICryptographyCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICryptography
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptography/EncryptToMD5", ReplyAction="http://tempuri.org/ICryptography/EncryptToMD5Response")]
        string EncryptToMD5(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptography/EncryptToMD5", ReplyAction="http://tempuri.org/ICryptography/EncryptToMD5Response")]
        System.Threading.Tasks.Task<string> EncryptToMD5Async(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptography/EncryptToSHA1", ReplyAction="http://tempuri.org/ICryptography/EncryptToSHA1Response")]
        string EncryptToSHA1(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptography/EncryptToSHA1", ReplyAction="http://tempuri.org/ICryptography/EncryptToSHA1Response")]
        System.Threading.Tasks.Task<string> EncryptToSHA1Async(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptography/EncryptToSHA256", ReplyAction="http://tempuri.org/ICryptography/EncryptToSHA256Response")]
        string EncryptToSHA256(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptography/EncryptToSHA256", ReplyAction="http://tempuri.org/ICryptography/EncryptToSHA256Response")]
        System.Threading.Tasks.Task<string> EncryptToSHA256Async(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptography/EncryptToSHA512", ReplyAction="http://tempuri.org/ICryptography/EncryptToSHA512Response")]
        string EncryptToSHA512(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptography/EncryptToSHA512", ReplyAction="http://tempuri.org/ICryptography/EncryptToSHA512Response")]
        System.Threading.Tasks.Task<string> EncryptToSHA512Async(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptography/WriteResult", ReplyAction="http://tempuri.org/ICryptography/WriteResultResponse")]
        void WriteResult(string result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptography/WriteResult", ReplyAction="http://tempuri.org/ICryptography/WriteResultResponse")]
        System.Threading.Tasks.Task WriteResultAsync(string result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICryptography/Connection")]
        void Connection();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICryptography/Connection")]
        System.Threading.Tasks.Task ConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICryptography/Disconnection")]
        void Disconnection();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICryptography/Disconnection")]
        System.Threading.Tasks.Task DisconnectionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICryptographyCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICryptography/Count")]
        void Count([System.ServiceModel.MessageParameterAttribute(Name="count")] int count1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICryptographyChannel : Client.ICryptography, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CryptographyClient : System.ServiceModel.DuplexClientBase<Client.ICryptography>, Client.ICryptography
    {
        
        public CryptographyClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance)
        {
        }
        
        public CryptographyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName)
        {
        }
        
        public CryptographyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }
        
        public CryptographyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }
        
        public CryptographyClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public string EncryptToMD5(string input)
        {
            return base.Channel.EncryptToMD5(input);
        }
        
        public System.Threading.Tasks.Task<string> EncryptToMD5Async(string input)
        {
            return base.Channel.EncryptToMD5Async(input);
        }
        
        public string EncryptToSHA1(string input)
        {
            return base.Channel.EncryptToSHA1(input);
        }
        
        public System.Threading.Tasks.Task<string> EncryptToSHA1Async(string input)
        {
            return base.Channel.EncryptToSHA1Async(input);
        }
        
        public string EncryptToSHA256(string input)
        {
            return base.Channel.EncryptToSHA256(input);
        }
        
        public System.Threading.Tasks.Task<string> EncryptToSHA256Async(string input)
        {
            return base.Channel.EncryptToSHA256Async(input);
        }
        
        public string EncryptToSHA512(string input)
        {
            return base.Channel.EncryptToSHA512(input);
        }
        
        public System.Threading.Tasks.Task<string> EncryptToSHA512Async(string input)
        {
            return base.Channel.EncryptToSHA512Async(input);
        }
        
        public void WriteResult(string result)
        {
            base.Channel.WriteResult(result);
        }
        
        public System.Threading.Tasks.Task WriteResultAsync(string result)
        {
            return base.Channel.WriteResultAsync(result);
        }
        
        public void Connection()
        {
            base.Channel.Connection();
        }
        
        public System.Threading.Tasks.Task ConnectionAsync()
        {
            return base.Channel.ConnectionAsync();
        }
        
        public void Disconnection()
        {
            base.Channel.Disconnection();
        }
        
        public System.Threading.Tasks.Task DisconnectionAsync()
        {
            return base.Channel.DisconnectionAsync();
        }
    }
}
